{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n\nerror FundMe__NotOwner();\n\n/** @title A contract for crowd funding\n * @author Adam Sobieski\n * @notice This contract is to demo a sample funding contract\n * @dev This uses PriceConverter library to perform ETH => USD conversion\n */\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    struct Funder {\n        address funderAddress;\n        uint256 value;\n    }\n\n    uint256 public constant MIN_USD = 50 * 1e18;\n    Funder[] funders;\n    address public immutable owner;\n    AggregatorV3Interface public priceFeed;\n\n    modifier onlyOwner() {\n        if (msg.sender != owner) {\n            revert FundMe__NotOwner();\n        }\n        _; //do the rest of the code in function\n    }\n\n    constructor(address _priceFeedAddress) {\n        owner = msg.sender;\n        priceFeed = AggregatorV3Interface(_priceFeedAddress);\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    /**\n     * @notice This function funds this contract\n     */\n    function fund() public payable {\n        require(msg.value.convertEthToUsd(priceFeed) >= MIN_USD, \"Not enough!\");\n        funders.push(Funder(msg.sender, msg.value));\n    }\n\n    /**\n     * @notice This function withdraws funds, transferring them to the owner's account\n     */\n    function withdraw() public onlyOwner {\n        clearFunders();\n        (bool callSuccess /*, bytes memory dataReturned*/, ) = payable(\n            msg.sender\n        ).call{value: address(this).balance}(\"\"); //if fails - returns false\n        require(callSuccess, \"Send failed\");\n    }\n\n    /**\n     * @notice This function clears the array of founders when the withdrawal is performed\n     */\n    function clearFunders() private {\n        for (uint8 i = 0; i < funders.length; ++i) {\n            delete funders[i];\n        }\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n/** @title A library that provides the ETH => USD conversion feature\n * @author Adam Sobieski\n * @notice This is to facilitate FundMe contract\n * @dev This implements a price feed as a library\n */\nlibrary PriceConverter {\n    /**\n     * @notice This function returns the latest ETH/USD price\n     * @param _priceFeed Price feed interface\n     * @return Latest ETH/USD price\n     */\n    function getPrice(\n        AggregatorV3Interface _priceFeed\n    ) internal view returns (uint256) {\n        (, int256 price, , , ) = _priceFeed.latestRoundData();\n        return uint256(price * 1e10);\n    }\n\n    /**\n     * @notice This function performs the price conversion from ETH to USD\n     * @param _ethAmount Value in ETH\n     * @param _priceFeed Price feed interface\n     * @return Value in USD\n     */\n    function convertEthToUsd(\n        uint256 _ethAmount,\n        AggregatorV3Interface _priceFeed\n    ) internal view returns (uint256) {\n        return (_ethAmount * getPrice(_priceFeed)) / 1e18;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}